name: Build

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    defaults:
      run:
        shell: bash
    permissions:
      contents: write

    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: packetcoders/action-setup-cache-python-poetry@v1.2.0
        with:
          python-version: "3.10"
          poetry-version: "1.7.1"

      - name: Build App
        run: |
          poetry run python build.py

      - name : Test App
        run: |
          ./dist/ldz.exe &
          sleep 30
          if [ -f ./CRASH.dump ]; then
            echo "CRASH.dump found. Test failed."
            cat ./CRASH.dump
            exit 1
          else
            echo "No CRASH.dump found. Test passed."
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: dist/ldz.exe

  build-macos:
    defaults:
      run:
        shell: bash
    permissions:
      contents: write

    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: packetcoders/action-setup-cache-python-poetry@v1.2.0
        with:
          python-version: "3.10"
          poetry-version: "1.7.1"

      - name: Build App
        run: |
          poetry run python build.py

      - name : Test App
        run: |
          open -a "$PWD/dist/ldz.app" &
          sleep 30
          ls -al
          ls -al ./dist 
          if [ -f ./dist/CRASH.dump ]; then
            echo "CRASH.dump found. Test failed."
            cat ./dist/CRASH.dump
            exit 1
          else
            echo "No CRASH.dump found. Test passed."
          fi

      - name: Zip App
        run: |
          cd dist
          zip -r ldz.zip ldz.app

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos
          path: dist/ldz.zip

  release:
    needs: [build-windows, build-macos]
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: packetcoders/action-setup-cache-python-poetry@v1.2.0
        with:
          python-version: "3.10"
          poetry-version: "1.7.1"

      - name: Extract Version
        run: |
          version=$(poetry version -s)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: dist/windows
      - uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: dist/macos

      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: v${{ env.VERSION }}
          generateReleaseNotes: true
          artifacts: |
            dist/windows/*
            dist/macos/*
            